version: "3.8"

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - orders_network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    hostname: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - orders_network

  postgres:
    image: postgres:15
    container_name: postgres_orders
    environment:
      POSTGRES_DB: orders
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_orders_data:/var/lib/postgresql/data
    networks:
      - orders_network

  postgres_inventory:
    image: postgres:15
    container_name: postgres_inventory
    environment:
      POSTGRES_DB: inventory
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"
    volumes:
      - postgres_inventory_data:/var/lib/postgresql/data
    networks:
      - orders_network

  orders:
    build: ./orders-service
    ports:
      - "8001-8002:8000"
    environment:
      PORT: 8000
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      DATABASE_URL: postgresql://user:password@postgres_orders:5432/orders
    depends_on:
      - kafka
      - postgres
    restart: on-failure
    deploy:
      replicas: 2
    networks:
      - orders_network

  inventory:
    build: ./inventory-service
    container_name: inventory-service
    ports:
      - "8006:8000"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      DATABASE_URL: postgresql://user:password@postgres_inventory:5432/inventory
    depends_on:
      - kafka
      - postgres_inventory
    restart: on-failure
    networks:
      - orders_network

  notification:
    build: ./notification-service
    container_name: notification-service
    ports:
      - "8005:8000"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      - kafka
    restart: on-failure
    networks:
      - orders_network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    depends_on:
      - kafka
    networks:
      - orders_network

  nginx:
    build: ./nginx
    container_name: nginx-orders
    ports:
       - "8000:80"
    networks:
      - orders_network
    depends_on:
      - orders

networks:
  orders_network:

volumes:
  postgres_orders_data:
  postgres_inventory_data: